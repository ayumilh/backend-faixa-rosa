generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  firstName         String?    @default("") @db.VarChar(50)
  lastName          String?    @default("") @db.VarChar(100)
  email             String     @unique @db.VarChar(320)
  password          String?    @default("") @db.VarChar(64)
  birthDate         DateTime?  @db.Date
  cpf               String?    @unique @db.VarChar(11)
  phone             String?    @default("") @db.VarChar(11)
  userType          UserType   @default(CONTRATANTE)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  companyName       String?
  companyAddress    String?
  companyCity       String?
  companyState      String?
  companyBio        String?
  basePoints        Int        @default(0)
  planId            Int?
  points            Int        @default(0)
  profileVisibility Boolean    @default(true)
  rank              Int?
  temporaryPoints   Int        @default(0)
  totalPoints       Int        @default(0)
  companion         Companion?
  Top10             Top10?

  conveniosCriados Convenio[]
  payments         Payment[]
  reviews          Review[]

  Contractor Contractor[]
}

model Document {
  id             Int       @id @default(autoincrement())
  companionId    Int
  type           String
  fileFront      String
  fileBack       String?
  documentStatus String    @default("PENDING")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  companion      Companion @relation(fields: [companionId], references: [id])
}

model PlanType {
  id                Int         @id @default(autoincrement())
  name              String      @unique
  size              String
  isOnline          Boolean     @default(true)
  accessDashboard   Boolean     @default(false)
  accessMetrics     Boolean     @default(false)
  accessConvenio    Boolean     @default(false)
  points            Int         @default(0)
  cityChangeAllowed Boolean     @default(true)
  cityChangeFee     Float
  isDarkMode        Boolean     @default(false)
  duration          Int?
  companions        Companion[]
  plans             Plan[]
}

model ExtraPlan {
  id               Int     @id @default(autoincrement())
  name             String  @unique
  description      String
  isTemporary      Boolean @default(false)
  duration         Int?
  pointsBonus      Int     @default(0)
  tempPoints       Int     @default(0)
  isEnabled        Boolean @default(true)
  hasContact       Boolean @default(false)
  canHideAge       Boolean @default(false)
  hasPublicReviews Boolean @default(false)
  hasDarkMode      Boolean @default(false)
  hasStories       Boolean @default(false)

  companions       Companion[]        @relation("CompanionExtraPlans")
  plans            Plan[]             @relation("PlanExtraPlans")
  PlanSubscription PlanSubscription[]
}

model Plan {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  price             Float
  description       String?
  isBasic           Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  planTypeId        Int?
  Companion         Companion[]
  convenios         Convenio[]
  payments          Payment[]
  planType          PlanType?          @relation(fields: [planTypeId], references: [id])
  planSubscriptions PlanSubscription[]
  extraPlans        ExtraPlan[]        @relation("PlanExtraPlans")
}

model PlanSubscription {
  id          Int       @id @default(autoincrement())
  companionId Int
  planId      Int?
  extraPlanId Int?
  isExtra     Boolean   @default(false)
  startDate   DateTime  @default(now())
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  companion Companion  @relation(fields: [companionId], references: [id], map: "CompanionSubscriptions")
  plan      Plan?      @relation(fields: [planId], references: [id])
  extraPlan ExtraPlan? @relation(fields: [extraPlanId], references: [id], map: "PlanSubscription_extraPlanId_fkey")
}

model Contractor {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int      @unique
  name           String
  age            Int
  profileStatus  String   @default("PENDING") // PENDING, ACTIVE, BANNED
  documentStatus String   @default("UNVERIFIED") // UNVERIFIED, VERIFIED, REJECTED
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relacionamentos para denúncias
  denunciasFeitas    Denuncia[] @relation("DenunciasFeitasContractor")
  denunciasRecebidas Denuncia[] @relation("DenunciasRecebidasContractor")
}

model Companion {
  id                      Int                          @id @default(autoincrement())
  userId                  Int                          @unique
  name                    String
  age                     Int                          @default(0)
  description             String
  city                    String
  state                   String
  profileStatus           String                       @default("PENDING")
  lastOnline              DateTime
  points                  Int                          @default(0)
  top10Id                 Int?
  planId                  Int?
  planTypeId              Int?
  createdAt               DateTime                     @default(now())
  updatedAt               DateTime                     @updatedAt
  documentStatus          String                       @default("PENDING")
  ageCategories           AgeCategoryCompanion[]
  plan                    Plan?                        @relation(fields: [planId], references: [id])
  planType                PlanType?                    @relation(fields: [planTypeId], references: [id])
  top10                   Top10?                       @relation("Top10Companions", fields: [top10Id], references: [id])
  user                    User                         @relation(fields: [userId], references: [id])
  contactMethods          ContactMethodCompanion[]
  documents               Document[]
  feedPosts               FeedPost[]
  lugares                 LocationCompanion[]
  media                   Media[]
  paymentMethods          PaymentMethodCompanion[]
  PhysicalCharacteristics PhysicalCharacteristics?
  subscriptions           PlanSubscription[]           @relation(map: "CompanionSubscriptions")
  reviews                 Review[]
  servicesOffered         ServiceCompanionOffered[]
  servicosEspeciais       ServicosEspeciaisCompanion[]
  servicosGerais          ServicosGeraisCompanion[]
  timedServiceCompanion   TimedServiceCompanion[]
  unavailableDays         UnavailableDates[]
  weeklySchedules         WeeklySchedule[]
  extraPlans              ExtraPlan[]                  @relation("CompanionExtraPlans")

  // Relacionamentos para denúncias

  denunciasFeitas    Denuncia[] @relation("DenunciasFeitasCompanion")
  denunciasRecebidas Denuncia[] @relation("DenunciasRecebidasCompanion")

  Story Story[]
}

model ContactMethodCompanion {
  id               Int       @id @default(autoincrement())
  companionId      Int
  whatsappNumber   String?   @db.VarChar(15)
  whatsappMessage  String?   @db.VarChar(255)
  telegramUsername String?   @db.VarChar(32)
  telegramMessage  String?   @db.VarChar(255)
  phoneNumber      String?   @db.VarChar(15)
  companion        Companion @relation(fields: [companionId], references: [id])
}

model TimedServiceCompanion {
  id             Int           @id @default(autoincrement())
  companionId    Int
  timedServiceId Int?
  isOffered      Boolean       @default(true)
  price          Float?
  companion      Companion     @relation(fields: [companionId], references: [id])
  TimedService   TimedService? @relation(fields: [timedServiceId], references: [id])
}

model PaymentMethodCompanion {
  id            Int           @id @default(autoincrement())
  companionId   Int
  paymentMethod PaymentMethod
  companion     Companion     @relation(fields: [companionId], references: [id])
}

model PhysicalCharacteristics {
  id                 Int       @id @default(autoincrement())
  companionId        Int       @unique
  gender             String
  genitalia          String
  weight             Float
  height             Int
  ethnicity          Etnia
  eyeColor           String
  hairStyle          String
  hairLength         String
  shoeSize           Int
  hasSilicone        Boolean
  hasTattoos         Boolean
  hasPiercings       Boolean
  smoker             Boolean
  description        String?
  comparisonMedia    String?
  hasComparisonMedia Boolean?   @default(false)
  
  companion          Companion @relation(fields: [companionId], references: [id])
}

model AgeCategoryCompanion {
  id          Int         @id @default(autoincrement())
  companionId Int
  ageCategory AgeCategory
  companion   Companion   @relation(fields: [companionId], references: [id])
}

model ServiceCompanionOffered {
  id          Int            @id @default(autoincrement())
  companionId Int
  serviceId   Int
  isOffered   Boolean        @default(false)
  price       Float?
  companion   Companion      @relation(fields: [companionId], references: [id])
  service     ServiceOffered @relation(fields: [serviceId], references: [id])
}

model ServicosGeraisCompanion {
  id          Int            @id @default(autoincrement())
  companionId Int
  servico     ServicosGerais
  companion   Companion      @relation(fields: [companionId], references: [id])
}

model ServicosEspeciaisCompanion {
  id          Int               @id @default(autoincrement())
  companionId Int
  servico     ServicosEspeciais
  companion   Companion         @relation(fields: [companionId], references: [id])
}

model LocationCompanion {
  id          Int       @id @default(autoincrement())
  companionId Int
  locationId  Int?
  companion   Companion @relation(fields: [companionId], references: [id])
  location    Location? @relation(fields: [locationId], references: [id])
}

model TimedService {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  description           String?
  defaultPrice          Float?
  timedServiceCompanion TimedServiceCompanion[]
}

model ServiceOffered {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique
  description             String?
  isOffered               Boolean
  ServiceCompanionOffered ServiceCompanionOffered[]
}

model Location {
  id         Int                 @id @default(autoincrement())
  name       String              @unique
  companions LocationCompanion[]
}

model WeeklySchedule {
  id          Int       @id @default(autoincrement())
  companionId Int
  dayOfWeek   String
  startTime   String?
  endTime     String?
  isActive    Boolean   @default(false)
  companion   Companion @relation(fields: [companionId], references: [id])
}

model UnavailableDates {
  id          Int       @id @default(autoincrement())
  companionId Int
  date        DateTime
  companion   Companion @relation(fields: [companionId], references: [id])
}

model Top10 {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  points    Int
  rank      Int
  userId    Int         @unique
  Companion Companion[] @relation("Top10Companions")
  user      User        @relation(fields: [userId], references: [id])
}

model Convenio {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  discount    Float
  category    ServiceCategory
  city        String
  state       String
  address     String
  whatsapp    String
  instagram   String?
  phone       String?
  image       String?
  planId      Int
  createdById Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   User            @relation(fields: [createdById], references: [id])
  plan        Plan            @relation(fields: [planId], references: [id])
}

model Review {
  id          Int       @id @default(autoincrement())
  companionId Int
  userId      Int
  rating      Int
  comment     String
  createdAt   DateTime  @default(now())
  companion   Companion @relation(fields: [companionId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Denuncia {
  id             Int      @id @default(autoincrement())
  motivo         String
  descricao      String
  denunciaStatus String   @default("PENDING")
  createdAt      DateTime @default(now())

  // podem fazer denúncias
  denuncianteCompanion   Companion? @relation("DenunciasFeitasCompanion", fields: [denuncianteCompanionId], references: [id])
  denuncianteCompanionId Int?

  denuncianteContractor   Contractor? @relation("DenunciasFeitasContractor", fields: [denuncianteContractorId], references: [id])
  denuncianteContractorId Int?

  // podem ser denunciados
  denunciadoCompanion   Companion? @relation("DenunciasRecebidasCompanion", fields: [denunciadoCompanionId], references: [id])
  denunciadoCompanionId Int?

  denunciadoContractor   Contractor? @relation("DenunciasRecebidasContractor", fields: [denunciadoContractorId], references: [id])
  denunciadoContractorId Int?
}

model Story {
  id          Int      @id @default(autoincrement())
  companionId Int
  url         String
  mediaType   String // "image" ou "video"
  expiresAt   DateTime // Tempo de expiração (24h após a criação)
  createdAt   DateTime @default(now())

  companion Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)
}

model FeedPost {
  id           Int       @id @default(autoincrement())
  title        String?
  description  String?
  mediaUrl     String
  mediaType    String
  lastOnline   DateTime?
  companionId  Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  companion    Companion @relation(fields: [companionId], references: [id])
}

model Metric {
  id        Int      @id @default(autoincrement())
  type      String
  name      String
  value     Int
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id          Int        @id @default(autoincrement())
  companionId Int?
  url         String
  mediaType   MediaType
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  companion   Companion? @relation(fields: [companionId], references: [id])
}

model Payment {
  id            Int      @id @default(autoincrement())
  userId        Int
  planId        Int
  amount        Float
  status        String
  transactionId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  plan          Plan     @relation(fields: [planId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

enum UserType {
  CONTRATANTE
  ACOMPANHANTE
  ANUNCIANTE
  EMPRESA
  ADMIN
}

enum PaymentMethod {
  CARTAO_CREDITO
  PIX
  LUXO
  ECONOMICAS
}

enum AgeCategory {
  COROAS
  NINFETAS
}

enum Atendimento {
  HOMENS
  MULHERES
  CASAIS
  DEFICIENTES_FISICOS
}

enum ContactMethod {
  LIGACAO
  WHATSAPP
  TELEGRAM
}

enum Etnia {
  BRANCA
  LATINA
  MULATA
  NEGRA
  ORIENTAl
  OUTRA
}

enum Cabelo {
  MORENAS
  LOIRAS
  RUIVAS
}

enum Estatura {
  ALTAS
  MIGNON
}

enum Corpo {
  GORDINHAS
  MAGRAS
}

enum Seios {
  PEITUDAS
  SEIOS_NATURAIS
}

enum Pubis {
  PELUDAS
  DEPILADO
}

enum ServicosGerais {
  BEIJOS_BOCA
  EJACULACAO_CORPO
  FACIAL
  FANTASIAS_DISFARCES
  MASSAGEM_EROTICA
  NAMORADINHA
  ORAL_SEM_CAMISINHA
  ORAL_COM_CAMISINHA
  SEXO_ANAL
  PSE
}

enum ServicosEspeciais {
  BEIJO_NEGRO
  CHUVA_DOURADA
  FETICHISMO
  GARGANTA_PROFUNDA
  SADO_DURO
  SADO_SUAVE
  SQUIRTING
  STRAP_ON
}

enum ServiceCategory {
  COMPRAS
  ENTRETENIMENTO
  SAUDE
  OUTROS
}

enum MediaType {
  IMAGE
  VIDEO
}
