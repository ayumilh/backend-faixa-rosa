generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int         @id @default(autoincrement())
  firstName         String?     @default("") @db.VarChar(50)
  lastName          String?     @default("") @db.VarChar(100)
  email             String      @unique @db.VarChar(320)
  password          String?     @default("") @db.VarChar(64)
  birthDate         DateTime?   @db.Date
  cpf               String?     @unique @db.VarChar(11)
  phone             String?     @default("") @db.VarChar(15)
  userType          UserType    @default(CONTRATANTE)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  planId            Int?
  profileVisibility Boolean     @default(true)
  companion         Companion?
  Contractor        Contractor?
  conveniosCriados  Convenio[]
  payments          Payment[]
  reviews           Review[]
  Top10             Top10?
}

model Document {
  id             Int       @id @default(autoincrement())
  companionId    Int
  type           String
  fileFront      String
  fileBack       String?
  documentStatus String    @default("PENDING")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  companion      Companion @relation(fields: [companionId], references: [id])
}

model PlanType {
  id              Int         @id
  name            String      @unique
  size            String
  isOnline        Boolean     @default(true)
  accessDashboard Boolean     @default(false)
  accessMetrics   Boolean     @default(false)
  accessConvenio  Boolean     @default(false)
  points          Int         @default(0)
  isDarkMode      Boolean     @default(false)
  duration        Int?
  companions      Companion[]
  plans           Plan[]
}

model ExtraPlan {
  id               Int                @id
  name             String             @unique
  description      String
  isTemporary      Boolean            @default(false)
  duration         Int?
  pointsBonus      Int                @default(0)
  isEnabled        Boolean            @default(true)
  hasContact       Boolean            @default(false)
  canHideAge       Boolean            @default(false)
  hasPublicReviews Boolean            @default(false)
  hasDarkMode      Boolean            @default(false)
  hasStories       Boolean            @default(false)
  PlanSubscription PlanSubscription[]
  companions       Companion[]        @relation("CompanionExtraPlans")
  plans            Plan[]             @relation("PlanExtraPlans")
  Payment          Payment[]          @relation("PaymentExtraPlans")
}

model Plan {
  id                Int                @id
  name              String             @unique
  price             Float
  description       String?
  isBasic           Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  Companion         Companion[]
  convenios         Convenio[]
  payments          Payment[]
  planTypeId        Int?
  planType          PlanType?          @relation(fields: [planTypeId], references: [id])
  planSubscriptions PlanSubscription[]
  extraPlans        ExtraPlan[]        @relation("PlanExtraPlans")
}

model PlanSubscription {
  id                 Int        @id @default(autoincrement())
  companionId        Int
  planId             Int?
  startDate          DateTime   @default(now())
  endDate            DateTime?
  nextPaymentDate    DateTime   @default(now())
  subscriptionStatus String     @default("ACTIVE") // Status da assinatura
  paymentMethod      String     @default("default_method") // Método de pagamento
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  isExtra            Boolean    @default(false)
  planSubscriptionId Int?
  extraPlanId        Int?
  companion          Companion  @relation(fields: [companionId], references: [id], map: "CompanionSubscriptions")
  extraPlan          ExtraPlan? @relation(fields: [extraPlanId], references: [id], map: "PlanSubscription_extraPlanId_fkey")
  plan               Plan?      @relation(fields: [planId], references: [id])

  Payment Payment[]
}

model CityChangeConfig {
  id        Int      @id @default(autoincrement())
  value     Float    @default(65.0)
  updatedAt DateTime @updatedAt
}

model Contractor {
  id                 Int        @id @default(autoincrement())
  userName           String     @unique
  userId             Int        @unique
  name               String
  age                Int
  profileStatus      String     @default("PENDING")
  documentStatus     String     @default("PENDING")
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  denunciasRecebidas Denuncia[] @relation("DenunciasRecebidasContractor")
  denunciasFeitas    Denuncia[] @relation("DenunciasFeitasContractor")

  Follow Follow[] @relation("Following")
}

model Companion {
  id                      Int                          @id @default(autoincrement())
  userName                String                       @unique
  userId                  Int                          @unique
  name                    String
  age                     Int                          @default(0)
  isAgeHidden             Boolean                      @default(false)
  description             String
  city                    String
  state                   String
  profileStatus           String                       @default("PENDING")
  lastOnline              DateTime
  points                  Int                          @default(0)
  top10Id                 Int?
  planId                  Int?
  planTypeId              Int?
  createdAt               DateTime                     @default(now())
  updatedAt               DateTime                     @updatedAt
  documentStatus          String                       @default("PENDING")
  bannerImage             String?
  profileImage            String?
  ageCategories           AgeCategoryCompanion[]
  plan                    Plan?                        @relation(fields: [planId], references: [id])
  planType                PlanType?                    @relation(fields: [planTypeId], references: [id])
  top10                   Top10?                       @relation("Top10Companions", fields: [top10Id], references: [id])
  user                    User                         @relation(fields: [userId], references: [id])
  contactMethods          ContactMethodCompanion[]
  denunciasRecebidas      Denuncia[]                   @relation("DenunciasRecebidasCompanion")
  denunciasFeitas         Denuncia[]                   @relation("DenunciasFeitasCompanion")
  documents               Document[]
  feedPosts               FeedPost[]
  lugares                 LocationCompanion[]
  media                   Media[]
  paymentMethods          PaymentMethodCompanion[]
  PhysicalCharacteristics PhysicalCharacteristics?
  subscriptions           PlanSubscription[]
  reviews                 Review[]
  servicesOffered         ServiceCompanionOffered[]
  servicosEspeciais       ServicosEspeciaisCompanion[]
  servicosGerais          ServicosGeraisCompanion[]
  Story                   Story[]
  timedServiceCompanion   TimedServiceCompanion[]
  unavailableDays         UnavailableDates[]
  weeklySchedules         WeeklySchedule[]
  extraPlans              ExtraPlan[]                  @relation("CompanionExtraPlans")
  ActivityLog             ActivityLog[]
  atendimentos            Atendimento[]

  Follow Follow[] @relation("Followers")

  carrouselImages CarrouselImage[]
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())

  // Relacionamento com o Contractor (quem está seguindo)
  follower Contractor @relation("Following", fields: [followerId], references: [id])

  // Relacionamento com o Companion (quem é seguido)
  following Companion @relation("Followers", fields: [followingId], references: [id])

  // Garantir que um Contractor não possa seguir mais de uma vez o mesmo Companion
  @@unique([followerId, followingId])
}

model ContactMethodCompanion {
  id                  Int       @id @default(autoincrement())
  companionId         Int
  whatsappNumber      String?   @db.VarChar(15)
  whatsappCountryCode String?   @db.VarChar(5) // Novo campo para código do país do WhatsApp
  whatsappMessage     String?   @db.VarChar(255)
  telegramUsername    String?   @db.VarChar(32)
  telegramMessage     String?   @db.VarChar(255)
  phoneNumber         String?   @db.VarChar(15)
  phoneCountryCode    String?   @db.VarChar(5) // Novo campo para código do país do telefone
  companion           Companion @relation(fields: [companionId], references: [id])
}

model TimedServiceCompanion {
  id             Int           @id @default(autoincrement())
  companionId    Int
  timedServiceId Int?
  isOffered      Boolean       @default(true)
  price          Float?
  companion      Companion     @relation(fields: [companionId], references: [id])
  TimedService   TimedService? @relation(fields: [timedServiceId], references: [id])
}

model PaymentMethodCompanion {
  id            Int           @id @default(autoincrement())
  companionId   Int
  paymentMethod PaymentMethod
  companion     Companion     @relation(fields: [companionId], references: [id])
}

model PhysicalCharacteristics {
  id                 Int         @id @default(autoincrement())
  companionId        Int         @unique
  weight             Float?
  height             Int?
  ethnicity          Etnia?
  shoeSize           String?
  hasSilicone        Boolean?
  hasTattoos         Boolean?
  hasPiercings       Boolean?
  smoker             Boolean?
  comparisonMedia    String?
  hasComparisonMedia Boolean?    @default(false)
  gender             GenderType?
  genitalia          Genitalia?
  eyeColor           EyeColor?
  hairLength         hairLength?
  hairStyle          hairStyle?
  companion          Companion   @relation(fields: [companionId], references: [id])
}

model AgeCategoryCompanion {
  id          Int         @id @default(autoincrement())
  companionId Int
  ageCategory AgeCategory
  companion   Companion   @relation(fields: [companionId], references: [id])
}

model ServiceCompanionOffered {
  id          Int            @id @default(autoincrement())
  companionId Int
  serviceId   Int
  isOffered   Boolean        @default(false)
  price       Float?
  companion   Companion      @relation(fields: [companionId], references: [id])
  service     ServiceOffered @relation(fields: [serviceId], references: [id])
}

model ServicosGeraisCompanion {
  id          Int            @id @default(autoincrement())
  companionId Int
  servico     ServicosGerais
  companion   Companion      @relation(fields: [companionId], references: [id])
}

model ServicosEspeciaisCompanion {
  id          Int               @id @default(autoincrement())
  companionId Int
  servico     ServicosEspeciais
  companion   Companion         @relation(fields: [companionId], references: [id])
}

model LocationCompanion {
  id          Int           @id @default(autoincrement())
  companionId Int
  locationId  Int?
  amenities   AmenityType[] @default([])
  companion   Companion     @relation(fields: [companionId], references: [id])
  location    Location?     @relation(fields: [locationId], references: [id])
}

model TimedService {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  description           String?
  defaultPrice          Float?
  timedServiceCompanion TimedServiceCompanion[]
}

model ServiceOffered {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique
  description             String?
  isOffered               Boolean
  ServiceCompanionOffered ServiceCompanionOffered[]
}

model Location {
  id         Int                 @id @default(autoincrement())
  name       LocationType        @unique
  companions LocationCompanion[]
}

model WeeklySchedule {
  id          Int       @id @default(autoincrement())
  companionId Int
  dayOfWeek   String
  startTime   String?
  endTime     String?
  isActive    Boolean   @default(false)
  companion   Companion @relation(fields: [companionId], references: [id])

  @@unique([companionId, dayOfWeek])
}

model UnavailableDates {
  id          Int       @id @default(autoincrement())
  companionId Int
  date        DateTime
  companion   Companion @relation(fields: [companionId], references: [id])
}

model Top10 {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  points    Int
  rank      Int
  userId    Int         @unique
  Companion Companion[] @relation("Top10Companions")
  user      User        @relation(fields: [userId], references: [id])
}

model Convenio {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  discount    Float
  category    ServiceCategory
  city        String
  state       String
  address     String
  whatsapp    String
  instagram   String?
  phone       String?
  image       String?
  planId      Int
  createdById Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   User            @relation(fields: [createdById], references: [id])
  plan        Plan            @relation(fields: [planId], references: [id])
}

model Review {
  id          Int       @id @default(autoincrement())
  companionId Int
  userId      Int
  rating      Int
  comment     String
  createdAt   DateTime  @default(now())
  companion   Companion @relation(fields: [companionId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Denuncia {
  id                      Int         @id @default(autoincrement())
  motivo                  String
  descricao               String
  createdAt               DateTime    @default(now())
  denunciadoCompanionId   Int?
  denunciadoContractorId  Int?
  denuncianteCompanionId  Int?
  denuncianteContractorId Int?
  denunciaStatus          String      @default("PENDING")
  denunciadoCompanion     Companion?  @relation("DenunciasRecebidasCompanion", fields: [denunciadoCompanionId], references: [id])
  denunciadoContractor    Contractor? @relation("DenunciasRecebidasContractor", fields: [denunciadoContractorId], references: [id])
  denuncianteCompanion    Companion?  @relation("DenunciasFeitasCompanion", fields: [denuncianteCompanionId], references: [id])
  denuncianteContractor   Contractor? @relation("DenunciasFeitasContractor", fields: [denuncianteContractorId], references: [id])
}

model Story {
  id          Int       @id @default(autoincrement())
  companionId Int
  url         String
  mediaType   String
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  companion   Companion @relation(fields: [companionId], references: [id], onDelete: Cascade)
}

model FeedPost {
  id          Int       @id @default(autoincrement())
  title       String?
  description String?
  lastOnline  DateTime?
  companionId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  mediaType   String
  mediaUrl    String
  companion   Companion @relation(fields: [companionId], references: [id])
}

model Metric {
  id        Int      @id @default(autoincrement())
  type      String
  name      String
  value     Int
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActivityLog {
  id          Int      @id @default(autoincrement())
  companionId Int
  action      String
  details     String?
  createdAt   DateTime @default(now())

  companion Companion @relation(fields: [companionId], references: [id])
}

model Media {
  id          Int        @id @default(autoincrement())
  companionId Int?
  url         String
  mediaType   MediaType
  status      String     @default("pending")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  companion   Companion? @relation(fields: [companionId], references: [id])
}

model CarrouselImage {
  id            Int        @id @default(autoincrement())
  companionId   Int
  imageUrl      String
  order         Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  companion     Companion  @relation(fields: [companionId], references: [id])

  @@unique([companionId, order])
}

model Payment {
  id                 Int               @id @default(autoincrement())
  userId             Int
  planId             Int?
  extraPlanId        Int?
  paymentMethod      String            @default("default_method")
  paymentMethodId    String?           @default("default_method_id")
  amount             Float
  status             String
  transactionId      String?
  cardToken          String?
  issuer_id          String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  plan               Plan?             @relation(fields: [planId], references: [id])
  planSubscriptionId Int?
  user               User              @relation(fields: [userId], references: [id])
  ExtraPlan          ExtraPlan[]       @relation("PaymentExtraPlans")
  PlanSubscription   PlanSubscription? @relation(fields: [planSubscriptionId], references: [id])
}

enum UserType {
  CONTRATANTE
  ACOMPANHANTE
  ANUNCIANTE
  EMPRESA
  ADMIN
}

enum AmenityType {
  WIFI
  CHUVEIRO
  AR_CONDICIONADO
  ESTACIONAMENTO
  FRIGOBAR
  PRESERVATIVOS
}

enum LocationType {
  A_DOMICILIO
  FESTAS_EVENTOS
  HOTEIS
  LOCAL_PROPRIO
  MOTEIS
  VIAGENS
  CLUB_DE_SWING
  JANTARES
  DESPEDIDA_SOLTEIRO
}

enum PaymentMethod {
  CARTAO_CREDITO
  PIX
  DEBITO
  DINHEIRO
}

enum AgeCategory {
  COROAS
  NINFETAS
}

enum Atendimento {
  HOMENS
  MULHERES
  CASAIS
  DEFICIENTES_FISICOS
}

enum ContactMethod {
  LIGACAO
  WHATSAPP
  TELEGRAM
}

enum GenderType {
  MULHER_CISGENERO
  HOMEM_CISGENERO
  MULHER_TRANS
  HOMEM_TRANS
}

enum Genitalia {
  NATURAL
  CIRURGIA
}

enum Etnia {
  BRANCA
  LATINA
  MULATA
  NEGRA
  ORIENTAl
  OUTRA
}

enum hairStyle {
  LISO
  CACHEADO
  ONDULADO
  CRESPO
  RASPADO
}

enum hairLength {
  CURTO
  MEDIO
  LONGO
}

enum EyeColor {
  CASTANHOS
  AZUIS
  VERDES
  CINZAS
  PRETOS
  OUTROS
}

enum Estatura {
  ALTAS
  MIGNON
}

enum Corpo {
  GORDINHAS
  MAGRAS
}

enum Seios {
  PEITUDAS
  SEIOS_NATURAIS
}

enum Pubis {
  PELUDAS
  DEPILADO
}

enum ServicosGerais {
  BEIJOS_BOCA
  EJACULACAO_CORPO
  FACIAL
  FANTASIAS_DISFARCES
  MASSAGEM_EROTICA
  NAMORADINHA
  ORAL_SEM_CAMISINHA
  ORAL_COM_CAMISINHA
  SEXO_ANAL
  PSE
}

enum ServicosEspeciais {
  BEIJO_NEGRO
  CHUVA_DOURADA
  FETICHISMO
  GARGANTA_PROFUNDA
  SADO_DURO
  SADO_SUAVE
  SQUIRTING
  STRAP_ON
}

enum ServiceCategory {
  COMPRAS
  ENTRETENIMENTO
  SAUDE
  OUTROS
}

enum MediaType {
  IMAGE
  VIDEO
}
