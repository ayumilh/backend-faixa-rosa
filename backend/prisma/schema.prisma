generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String             @unique
  password          String
  cpf               String             @unique
  phone             String
  userType          UserType           @default(CONTRATANTE)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  companyName       String?
  companyAddress    String?
  companyCity       String?
  companyState      String?
  companyBio        String?
  companion         Companion?
  conveniosCriados  Convenio[]
  denunciasFeitas   Denuncia[]         @relation("UserDenunciasFeitas")
  payments          Payment[]
  planSubscriptions PlanSubscription[]
  reviews           Review[]
}

model Companion {
  id                 Int                          @id @default(autoincrement())
  userId             Int                          @unique
  name               String
  age                Int
  description        String
  city               String
  state              String
  status             String
  lastOnline         DateTime
  points             Int                          @default(0)
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  top10Id            Int?
  ageCategories      AgeCategoryCompanion[]
  atendimentos       AtendimentoCompanion[]
  cabelos            CabeloCompanion[]
  top10              Top10?                       @relation("Top10Companions", fields: [top10Id], references: [id])
  user               User                         @relation(fields: [userId], references: [id])
  contactMethods     ContactMethodCompanion[]
  corpos             CorpoCompanion[]
  denunciasRecebidas Denuncia[]                   @relation("CompanionDenunciasRecebidas")
  estaturas          EstaturaCompanion[]
  etnias             EtniaCompanion[]
  feedPosts          FeedPost[]
  lugares            LugarCompanion[]
  media              Media[]
  paymentMethods     PaymentMethodCompanion[]
  pubis              PubisCompanion[]
  reviews            Review[]
  seios              SeiosCompanion[]
  servicosEspeciais  ServicosEspeciaisCompanion[]
  servicosGerais     ServicosGeraisCompanion[]
}

model Plan {
  id                Int                @id @default(autoincrement())
  name              String
  price             Float
  description       String?
  isDarkMode        Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  convenios         Convenio[]
  payments          Payment[]
  planSubscriptions PlanSubscription[]
}

model PlanSubscription {
  id        Int       @id @default(autoincrement())
  userId    Int
  planId    Int
  startDate DateTime  @default(now())
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  plan      Plan      @relation(fields: [planId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Convenio {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  discount    Float
  category    ServiceCategory
  city        String
  state       String
  address     String
  whatsapp    String
  instagram   String?
  phone       String?
  image       String?
  planId      Int
  createdById Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   User            @relation(fields: [createdById], references: [id])
  plan        Plan            @relation(fields: [planId], references: [id])
}

model Top10 {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  companions Companion[] @relation("Top10Companions")
}

model PaymentMethodCompanion {
  id            Int           @id @default(autoincrement())
  companionId   Int
  paymentMethod PaymentMethod
  companion     Companion     @relation(fields: [companionId], references: [id])
}

model AgeCategoryCompanion {
  id          Int         @id @default(autoincrement())
  companionId Int
  ageCategory AgeCategory
  companion   Companion   @relation(fields: [companionId], references: [id])
}

model AtendimentoCompanion {
  id          Int         @id @default(autoincrement())
  companionId Int
  atendimento Atendimento
  companion   Companion   @relation(fields: [companionId], references: [id])
}

model ContactMethodCompanion {
  id            Int           @id @default(autoincrement())
  companionId   Int
  contactMethod ContactMethod
  companion     Companion     @relation(fields: [companionId], references: [id])
}

model EtniaCompanion {
  id          Int       @id @default(autoincrement())
  companionId Int
  etnia       Etnia
  companion   Companion @relation(fields: [companionId], references: [id])
}

model CabeloCompanion {
  id          Int       @id @default(autoincrement())
  companionId Int
  cabelo      Cabelo
  companion   Companion @relation(fields: [companionId], references: [id])
}

model EstaturaCompanion {
  id          Int       @id @default(autoincrement())
  companionId Int
  estatura    Estatura
  companion   Companion @relation(fields: [companionId], references: [id])
}

model CorpoCompanion {
  id          Int       @id @default(autoincrement())
  companionId Int
  corpo       Corpo
  companion   Companion @relation(fields: [companionId], references: [id])
}

model SeiosCompanion {
  id          Int       @id @default(autoincrement())
  companionId Int
  seios       Seios
  companion   Companion @relation(fields: [companionId], references: [id])
}

model PubisCompanion {
  id          Int       @id @default(autoincrement())
  companionId Int
  pubis       Pubis
  companion   Companion @relation(fields: [companionId], references: [id])
}

model ServicosGeraisCompanion {
  id          Int            @id @default(autoincrement())
  companionId Int
  servico     ServicosGerais
  companion   Companion      @relation(fields: [companionId], references: [id])
}

model ServicosEspeciaisCompanion {
  id          Int               @id @default(autoincrement())
  companionId Int
  servico     ServicosEspeciais
  companion   Companion         @relation(fields: [companionId], references: [id])
}

model LugarCompanion {
  id          Int       @id @default(autoincrement())
  companionId Int
  lugar       Lugar
  companion   Companion @relation(fields: [companionId], references: [id])
}

model Review {
  id          Int       @id @default(autoincrement())
  companionId Int
  userId      Int
  rating      Int
  comment     String
  createdAt   DateTime  @default(now())
  companion   Companion @relation(fields: [companionId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Denuncia {
  id            Int       @id @default(autoincrement())
  denuncianteId Int
  denunciadoId  Int
  motivo        String
  descricao     String?
  anexo         String?
  createdAt     DateTime  @default(now())
  denunciado    Companion @relation("CompanionDenunciasRecebidas", fields: [denunciadoId], references: [id])
  denunciante   User      @relation("UserDenunciasFeitas", fields: [denuncianteId], references: [id])
}

model FeedPost {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  content       String
  featuredImage String
  pricePerHour  Float
  location      String
  lastOnline    DateTime
  companionId   Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  companion     Companion @relation(fields: [companionId], references: [id])
}

model Metric {
  id        Int      @id @default(autoincrement())
  type      String
  name      String
  value     Int
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id          Int        @id @default(autoincrement())
  companionId Int?
  url         String
  mediaType   MediaType
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  companion   Companion? @relation(fields: [companionId], references: [id])
}

model Payment {
  id            Int      @id @default(autoincrement())
  userId        Int
  planId        Int
  amount        Float
  status        String
  transactionId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  plan          Plan     @relation(fields: [planId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

enum UserType {
  CONTRATANTE
  ACOMPANHANTE
  ANUNCIANTE
  EMPRESA
}

enum PaymentMethod {
  CARTAO_CREDITO
  PIX
  LUXO
  ECONOMICAS
}

enum AgeCategory {
  COROAS
  NINFETAS
}

enum Atendimento {
  HOMENS
  MULHERES
  CASAIS
  DEFICIENTES_FISICOS
}

enum ContactMethod {
  LIGACAO
  WHATSAPP
  TELEGRAM
}

enum Etnia {
  BRANCAS
  LATINAS
  MULATAS
  NEGRAS
  ORIENTAIS
}

enum Cabelo {
  MORENAS
  LOIRAS
  RUIVAS
}

enum Estatura {
  ALTAS
  MIGNON
}

enum Corpo {
  GORDINHAS
  MAGRAS
}

enum Seios {
  PEITUDAS
  SEIOS_NATURAIS
}

enum Pubis {
  PELUDAS
  DEPILADO
}

enum ServicosGerais {
  BEIJOS_BOCA
  EJACULACAO_CORPO
  FACIAL
  FANTASIAS_DISFARCES
  MASSAGEM_EROTICA
  NAMORADINHA
  ORAL_SEM_CAMISINHA
  ORAL_COM_CAMISINHA
  SEXO_ANAL
  PSE
}

enum ServicosEspeciais {
  BEIJO_NEGRO
  CHUVA_DOURADA
  FETICHISMO
  GARGANTA_PROFUNDA
  SADO_DURO
  SADO_SUAVE
  SQUIRTING
  STRAP_ON
}

enum Lugar {
  A_DOMICILIO
  CLUBE_SWING
  COM_LOCAL
  DESPEDIDAS_SOLTEIRO
  FESTAS_EVENTOS
  HOTEL
  JANTAR_ROMANTICO
  VIAGENS
}

enum ServiceCategory {
  COMPRAS
  ENTRETENIMENTO
  SAUDE
  OUTROS
}

enum MediaType {
  IMAGE
  VIDEO
}
