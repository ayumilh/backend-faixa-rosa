generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  firstName         String?    @default("") @db.VarChar(50)
  lastName          String?    @default("") @db.VarChar(100)
  email             String     @unique @db.VarChar(320)
  password          String?    @default("") @db.VarChar(64)
  birthDate         DateTime?  @db.Date
  cpf               String?    @unique @db.VarChar(11)
  phone             String?    @default("") @db.VarChar(11)
  userType          UserType   @default(CONTRATANTE)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  companyName       String?
  companyAddress    String?
  companyCity       String?
  companyState      String?
  companyBio        String?
  basePoints        Int        @default(0)
  planId            Int?
  points            Int        @default(0)
  profileVisibility Boolean    @default(true)
  rank              Int?
  temporaryPoints   Int        @default(0)
  totalPoints       Int        @default(0)
  companion         Companion?
  Top10             Top10?

  // Relacionamentos
  conveniosCriados  Convenio[]
  denunciasFeitas   Denuncia[]         @relation("UserDenunciasFeitas")
  payments          Payment[]
  planSubscriptions PlanSubscription[]
  reviews           Review[]
  plan              Plan?              @relation(fields: [planId], references: [id])
  extraPlans        ExtraPlan[]        @relation("UserExtraPlans")
  planTypes         PlanType[]         @relation("UserPlanTypes")
}

// PLANOS
model PlanType {
  id                Int     @id @default(autoincrement())
  name              String  @unique
  size              String
  isOnline          Boolean @default(true)
  accessDashboard   Boolean @default(false)
  accessMetrics     Boolean @default(false)
  accessConvenio    Boolean @default(false)
  points            Int     @default(0)
  cityChangeAllowed Boolean @default(true)
  cityChangeFee     Float
  isDarkMode        Boolean @default(false)
  duration          Int?
  users             User[]  @relation("UserPlanTypes")

  plans Plan[] // Relacionamento bidirecional
}

model ExtraPlan {
  id               Int     @id @default(autoincrement())
  name             String  @unique
  description      String
  isTemporary      Boolean @default(false)
  duration         Int?
  pointsBonus      Int     @default(0)
  tempPoints       Int     @default(0)
  isEnabled        Boolean @default(true)
  hasContact       Boolean @default(false)
  canHideAge       Boolean @default(false)
  hasPublicReviews Boolean @default(false)
  hasDarkMode      Boolean @default(false)
  hasStories       Boolean @default(false)

  // Relação com User (muitos para muitos)
  users User[] @relation("UserExtraPlans")
}

model Plan {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  price       Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  extraPlanId Int?
  isBasic     Boolean  @default(false)

  planTypeId Int? // Chave estrangeira para PlanType
  planType   PlanType? @relation(fields: [planTypeId], references: [id]) // Relacionamento com PlanType ----- mudei o extraPlanId, ver se quebra algo no seed de planos, verificar a criação do plano NItro basico para o extra

  convenios         Convenio[]
  payments          Payment[]
  planSubscriptions PlanSubscription[]
  User              User[]
}

model PlanSubscription {
  id        Int       @id @default(autoincrement())
  userId    Int
  planId    Int
  startDate DateTime  @default(now())
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  plan      Plan      @relation(fields: [planId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

// MODELOS DE DADOS DE ACOMPANHANTES
model Companion {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  name        String
  age         Int      @default(0)
  description String
  city        String
  state       String
  status      String
  lastOnline  DateTime
  points      Int      @default(0)
  top10Id     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relacionamentos
  top10                   Top10?                       @relation("Top10Companions", fields: [top10Id], references: [id])
  user                    User                         @relation(fields: [userId], references: [id])
  PhysicalCharacteristics PhysicalCharacteristics[]
  timedServiceCompanion   TimedServiceCompanion[]
  contactMethods          ContactMethodCompanion[]
  lugares                 LocationCompanion[]
  paymentMethods          PaymentMethodCompanion[]
  servicosEspeciais       ServicosEspeciaisCompanion[]
  servicosGerais          ServicosGeraisCompanion[]
  ageCategories           AgeCategoryCompanion[]
  feedPosts               FeedPost[]
  media                   Media[]
  reviews                 Review[]
  denunciasRecebidas      Denuncia[]                   @relation("CompanionDenunciasRecebidas")
  ServiceCompanionOffered ServiceCompanionOffered[]
}

model ContactMethodCompanion {
  id            Int           @id @default(autoincrement())
  companionId   Int
  contactMethod ContactMethod
  details       String

  companion Companion @relation(fields: [companionId], references: [id])
}

model TimedServiceCompanion {
  id             Int     @id @default(autoincrement())
  companionId    Int
  timedServiceId Int?
  isOffered      Boolean @default(true)
  price          Float?

  companion    Companion     @relation(fields: [companionId], references: [id])
  TimedService TimedService? @relation(fields: [timedServiceId], references: [id])
}

model PaymentMethodCompanion {
  id            Int           @id @default(autoincrement())
  companionId   Int
  paymentMethod PaymentMethod

  companion Companion @relation(fields: [companionId], references: [id])
}

model PhysicalCharacteristics {
  id           Int      @id @default(autoincrement())
  companionId  Int      @unique
  gender       String
  genitalia    String
  weight       Float
  height       Int
  estatura     Estatura
  ethnicity    Etnia
  eyeColor     String
  hairStyle    Cabelo
  hairLength   String
  shoeSize     Int
  hasSilicone  Boolean
  hasTattoos   Boolean
  hasPiercings Boolean
  smoker       Boolean
  pubis        Pubis
  bodyType     Corpo
  breastType   Seios

  companion Companion @relation(fields: [companionId], references: [id])
}

model AgeCategoryCompanion {
  id          Int         @id @default(autoincrement())
  companionId Int
  ageCategory AgeCategory

  companion Companion @relation(fields: [companionId], references: [id])
}

// serviços oferecidos
model ServiceCompanionOffered {
  id          Int     @id @default(autoincrement())
  companionId Int
  serviceId   Int
  isOffered   Boolean @default(false)
  price       Float?

  companion Companion      @relation(fields: [companionId], references: [id])
  service   ServiceOffered @relation(fields: [serviceId], references: [id])
}

model ServicosGeraisCompanion {
  id          Int            @id @default(autoincrement())
  companionId Int
  servico     ServicosGerais
  companion   Companion      @relation(fields: [companionId], references: [id])
}

model ServicosEspeciaisCompanion {
  id          Int               @id @default(autoincrement())
  companionId Int
  servico     ServicosEspeciais
  companion   Companion         @relation(fields: [companionId], references: [id])
}

model LocationCompanion {
  id          Int   @id @default(autoincrement())
  companionId Int
  lugar       Lugar
  locationId  Int?

  companion Companion @relation(fields: [companionId], references: [id])
  location  Location? @relation(fields: [locationId], references: [id])
}

// MODELOS DE DADOS DE GERAIS
model TimedService {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  description      String?
  defaultPrice     Float? 

  timedServiceCompanion TimedServiceCompanion[] // Relacionamento com os acompanhantes
}

model ServiceOffered {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique
  description             String?
  isOffered               Boolean

  ServiceCompanionOffered ServiceCompanionOffered[] // Relacionamento com os acompanhantes
}

model Location {
  id         Int                 @id @default(autoincrement())
  name       String              @unique
  companions LocationCompanion[]
}

model Top10 {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  points    Int
  rank      Int
  userId    Int         @unique
  Companion Companion[] @relation("Top10Companions")
  user      User        @relation(fields: [userId], references: [id])
}

model Convenio {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  discount    Float
  category    ServiceCategory
  city        String
  state       String
  address     String
  whatsapp    String
  instagram   String?
  phone       String?
  image       String?
  planId      Int
  createdById Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   User            @relation(fields: [createdById], references: [id])
  plan        Plan            @relation(fields: [planId], references: [id])
}

model Review {
  id          Int       @id @default(autoincrement())
  companionId Int
  userId      Int
  rating      Int
  comment     String
  createdAt   DateTime  @default(now())
  companion   Companion @relation(fields: [companionId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Denuncia {
  id            Int       @id @default(autoincrement())
  denuncianteId Int
  denunciadoId  Int
  motivo        String
  descricao     String?
  anexo         String?
  createdAt     DateTime  @default(now())
  denunciado    Companion @relation("CompanionDenunciasRecebidas", fields: [denunciadoId], references: [id])
  denunciante   User      @relation("UserDenunciasFeitas", fields: [denuncianteId], references: [id])
}

model FeedPost {
  id            Int       @id @default(autoincrement())
  title         String
  description   String
  content       String
  featuredImage String
  pricePerHour  Float
  location      String
  lastOnline    DateTime
  companionId   Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  companion     Companion @relation(fields: [companionId], references: [id])
}

model Metric {
  id        Int      @id @default(autoincrement())
  type      String
  name      String
  value     Int
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id          Int        @id @default(autoincrement())
  companionId Int?
  url         String
  mediaType   MediaType
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  companion   Companion? @relation(fields: [companionId], references: [id])
}

model Payment {
  id            Int      @id @default(autoincrement())
  userId        Int
  planId        Int
  amount        Float
  status        String
  transactionId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  plan          Plan     @relation(fields: [planId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

// ENUMS
enum UserType {
  CONTRATANTE
  ACOMPANHANTE
  ANUNCIANTE
  EMPRESA
}

enum PaymentMethod {
  CARTAO_CREDITO
  PIX
  LUXO
  ECONOMICAS
}

enum AgeCategory {
  COROAS
  NINFETAS
}

enum Atendimento {
  HOMENS
  MULHERES
  CASAIS
  DEFICIENTES_FISICOS
}

enum ContactMethod {
  LIGACAO
  WHATSAPP
  TELEGRAM
}

// ENUMS DE CARACTERISTICAS FISICAS
enum Etnia {
  BRANCAS
  LATINAS
  MULATAS
  NEGRAS
  ORIENTAIS
}

enum Cabelo {
  MORENAS
  LOIRAS
  RUIVAS
}

enum Estatura {
  ALTAS
  MIGNON
}

enum Corpo {
  GORDINHAS
  MAGRAS
}

enum Seios {
  PEITUDAS
  SEIOS_NATURAIS
}

enum Pubis {
  PELUDAS
  DEPILADO
}

// ENUMS DE SERVICOS
enum ServicosGerais {
  BEIJOS_BOCA
  EJACULACAO_CORPO
  FACIAL
  FANTASIAS_DISFARCES
  MASSAGEM_EROTICA
  NAMORADINHA
  ORAL_SEM_CAMISINHA
  ORAL_COM_CAMISINHA
  SEXO_ANAL
  PSE
}

enum ServicosEspeciais {
  BEIJO_NEGRO
  CHUVA_DOURADA
  FETICHISMO
  GARGANTA_PROFUNDA
  SADO_DURO
  SADO_SUAVE
  SQUIRTING
  STRAP_ON
}

enum ServiceCategory {
  COMPRAS
  ENTRETENIMENTO
  SAUDE
  OUTROS
}

enum Lugar {
  A_DOMICILIO
  CLUBE_SWING
  COM_LOCAL
  DESPEDIDAS_SOLTEIRO
  FESTAS_EVENTOS
  HOTEL
  JANTAR_ROMANTICO
  VIAGENS
}


enum MediaType {
  IMAGE
  VIDEO
}
