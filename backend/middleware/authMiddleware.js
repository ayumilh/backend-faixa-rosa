const jwt = require("jsonwebtoken");

// Middleware para verificar autentica√ß√£o geral
function authenticate(req, res, next) {
    const authHeader = req.headers.authorization;

    console.log("üîê Authorization Header:", authHeader);

    // Verifica se o header existe e est√° no formato correto
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
        console.warn("‚ö†Ô∏è Token ausente ou mal formatado");
        return res.status(401).json({ error: "Token n√£o fornecido ou mal formatado" });
    }

    const token = authHeader.split(" ")[1];

    console.log("üîç Token extra√≠do:", token);

    if (!token) {
        console.warn("‚ö†Ô∏è Token ausente ap√≥s Bearer");
        return res.status(401).json({ error: "Token ausente ap√≥s Bearer" });
    }

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        req.user = decoded; // Anexa os dados do usu√°rio (id, role, etc.) ao objeto req
        console.log("‚úÖ Token validado com sucesso:", decoded);
        next();
    } catch (error) {
        console.error("‚ùå Erro ao validar token:", error.message);
        return res.status(403).json({ error: "Token inv√°lido ou expirado" });
    }
}

// Middleware para verificar se o usu√°rio √© ADMIN
function verifyAdmin(req, res, next) {
    if (!req.user || req.user.userType !== "ADMIN") {
        return res.status(403).json({ error: "Acesso negado. Apenas administradores podem acessar esta rota." });
    }
    next();
}

module.exports = { authenticate, verifyAdmin };
